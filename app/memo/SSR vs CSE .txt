✅ SSR (서버 사이드 렌더링)
getServerSideProps를 사용하여 서버에서 데이터를 가져온 후 HTML을 생성
장점: SEO 최적화, 항상 최신 데이터 제공
단점: 서버 요청마다 렌더링이 필요하므로 응답 속도가 느려질 수 있음
사용 예시: 사용자 맞춤 데이터를 제공해야 하는 페이지 (예: 대시보드, 로그인 후 마이페이지)

✅ CSR (클라이언트 사이드 렌더링)
페이지를 먼저 렌더링한 후, useEffect 또는 React Query 등을 사용해 클라이언트에서 데이터를 가져옴
장점: 초기 로딩이 빠르고 사용자 경험이 부드러움
단점: SEO에 불리할 수 있음
사용 예시: 자주 변경되는 데이터 (예: 실시간 차트, 대시보드 위젯)

✅ React , Next.js
✔ React → 기본적으로 CSR
✔ Next.js → SSR + CSR 혼용 

✅ React, CSR, SPA의 관계
✔ React는 기본적으로 CSR을 사용하는 SPA 방식의 라이브러리
✔ CSR을 사용하면 SPA가 가능하지만, SPA가 CSR만 사용하는 것은 아님 (Next.js를 쓰면 SSR도 가능)
✔ CSR은 렌더링 방식이고, SPA는 애플리케이션 구조를 의미함
즉, React 기반의 웹앱은 보통 CSR을 사용하는 SPA 형태로 동작하지만, 필요에 따라 SSR이나 SSG를 적용할 수도 있음 🚀